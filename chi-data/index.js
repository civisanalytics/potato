// Generated by CoffeeScript 1.7.1
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.move_towards_target = __bind(this.move_towards_target, this);
      this.update = __bind(this.update, this);
      this.split_by_position = __bind(this.split_by_position, this);
      this.split_by_team = __bind(this.split_by_team, this);
      this.split_by_school = __bind(this.split_by_school, this);
      this.split_buttons = __bind(this.split_buttons, this);
      this.remove_nodes = __bind(this.remove_nodes, this);
      this.add_nodes = __bind(this.add_nodes, this);
      this.toggleField = __bind(this.toggleField, this);
      this.data = data;
      this.width = 960;
      this.height = 750;
      this.tooltip = CustomTooltip("player_tooltip");
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height);
      this.force = d3.layout.force().gravity(-0.01).charge(function(d) {
        return -Math.pow(d.radius, 2.0) * 1.5;
      }).size([this.width, this.height]);
      this.nodes = this.force.nodes();
      this.do_teams();
      this.do_schools();
      this.do_positions();
      this.split_buttons();
    }

    BubbleChart.prototype.do_teams = function() {
      var teams;
      teams = [];
      this.data.forEach((function(_this) {
        return function(d) {
          if (teams.indexOf(d.team) < 0) {
            return teams.push(d.team);
          }
        };
      })(this));
      teams = teams.sort();
      d3.select("#team-select").selectAll('option').data(teams).enter().append("option").attr("value", function(d) {
        return d;
      }).text(function(d) {
        return d;
      });
      return $("#team-select").select2({
        placeholder: 'Select a Team',
        width: 'resolve'
      }).on("change", (function(_this) {
        return function(e) {
          return _this.toggleField('team', e);
        };
      })(this));
    };

    BubbleChart.prototype.do_schools = function() {
      var schools;
      schools = [];
      this.data.forEach((function(_this) {
        return function(d) {
          if (schools.indexOf(d.school) < 0) {
            return schools.push(d.school);
          }
        };
      })(this));
      d3.select("#school-select").selectAll('option').data(schools).enter().append("option").attr("value", function(d) {
        return d;
      }).text(function(d) {
        return d;
      });
      $("#school-select").select2({
        placeholder: 'Select a School',
        width: 'resolve'
      }).on("change", (function(_this) {
        return function(e) {
          return _this.toggleField('school', e);
        };
      })(this));
      this.conferences = [
        {
          name: "SEC",
          teams: ["LSU", "Alabama", "Florida", "Georgia", "Kentucky", "Missouri", "South Carolina", "Tennessee", "Vanderbilt", "Arkansas", "Auburn", "Mississippi", "Mississippi State", "Texas A&M;"]
        }, {
          name: "ACC",
          teams: ["Boston College", "Clemson", "Duke", "Florida State", "Georgia Tech", "Louisville", "Miami (Fla.)", "North Carolina", "North Carolina State", "Pittsburgh", "Syracuse", "Virginia", "Virginia Tech", "Wake Forest"]
        }
      ];
      return d3.select("#school-select-wrapper").selectAll('button').data(this.conferences).enter().append("button").attr("value", function(d) {
        return d.name;
      }).text(function(d) {
        return d.name;
      }).on("click", function(d) {
        return $("#school-select").select2('val', d.teams, true);
      });
    };

    BubbleChart.prototype.do_positions = function() {
      var positions;
      positions = [];
      this.data.forEach((function(_this) {
        return function(d) {
          if (positions.indexOf(d.position) < 0) {
            return positions.push(d.position);
          }
        };
      })(this));
      d3.select("#position-select").selectAll('option').data(positions).enter().append("option").attr("value", function(d) {
        return d;
      }).text(function(d) {
        return d;
      });
      return $("#position-select").select2({
        placeholder: 'Select a Position',
        width: 'resolve'
      }).on("change", (function(_this) {
        return function(e) {
          return _this.toggleField('position', e);
        };
      })(this));
    };

    BubbleChart.prototype.toggleField = function(field, e) {
      if (typeof e.added !== 'undefined') {
        if (typeof e.added.id !== 'undefined') {
          return this.add_nodes(field, e.added.id);
        } else {
          this.remove_nodes('radius', 8);
          return e.added.forEach((function(_this) {
            return function(item) {
              return _this.add_nodes(field, item.id);
            };
          })(this));
        }
      } else if (typeof e.removed !== 'undefined') {
        return this.remove_nodes(field, e.removed.id);
      }
    };

    BubbleChart.prototype.add_nodes = function(field, val) {
      this.data.forEach((function(_this) {
        return function(d) {
          var node;
          if (d[field] === val) {
            node = {
              id: d.id,
              radius: 8,
              name: d.name,
              team: d.team,
              school: d.school,
              position: d.position,
              x: Math.random() * 900,
              y: Math.random() * 800,
              tarx: _this.width / 2.0,
              tary: _this.height / 2.0
            };
            return _this.nodes.push(node);
          }
        };
      })(this));
      return this.update();
    };

    BubbleChart.prototype.remove_nodes = function(field, val) {
      var len;
      len = this.nodes.length;
      while (len--) {
        if (this.nodes[len][field] === val) {
          this.nodes.splice(len, 1);
        }
      }
      return this.update();
    };

    BubbleChart.prototype.split_buttons = function() {
      $('#split-school').on("click", (function(_this) {
        return function(e) {
          return _this.split_by_school();
        };
      })(this));
      $('#split-team').on("click", (function(_this) {
        return function(e) {
          return _this.split_by_team();
        };
      })(this));
      return $('#split-position').on("click", (function(_this) {
        return function(e) {
          return _this.split_by_position();
        };
      })(this));
    };

    BubbleChart.prototype.split_by_school = function() {
      var curr_col, curr_row, curr_schools, height_2, num_cols, num_rows, width_2;
      curr_schools = [];
      this.circles.each((function(_this) {
        return function(c) {
          if (curr_schools.indexOf(c.school) < 0) {
            return curr_schools.push(c.school);
          }
        };
      })(this));
      num_rows = Math.round(Math.sqrt(curr_schools.length)) + 1;
      num_cols = curr_schools.length / (num_rows - 1);
      curr_row = 0;
      curr_col = 0;
      width_2 = this.width - 200;
      height_2 = this.height - 130;
      curr_schools.forEach((function(_this) {
        return function(s, i) {
          curr_schools[i] = {
            school: s,
            tarx: 50 + (0.5 + curr_col) * (width_2 / num_cols),
            tary: 70 + (0.5 + curr_row) * (height_2 / num_rows)
          };
          curr_col++;
          if (curr_col >= num_cols) {
            curr_col = 0;
            return curr_row++;
          }
        };
      })(this));
      this.circles.each((function(_this) {
        return function(c) {
          return curr_schools.forEach(function(s) {
            if (s.school === c.school) {
              c.tarx = s.tarx;
              return c.tary = s.tary;
            }
          });
        };
      })(this));
      console.log(this.circles);
      return this.update();
    };

    BubbleChart.prototype.split_by_team = function() {
      var curr_col, curr_row, curr_teams, height_2, num_cols, num_rows, width_2;
      curr_teams = [];
      this.circles.each((function(_this) {
        return function(c) {
          if (curr_teams.indexOf(c.team) < 0) {
            return curr_teams.push(c.team);
          }
        };
      })(this));
      num_rows = Math.round(Math.sqrt(curr_teams.length)) + 1;
      num_cols = curr_teams.length / (num_rows - 1);
      curr_row = 0;
      curr_col = 0;
      width_2 = this.width - 200;
      height_2 = this.height - 130;
      curr_teams.forEach((function(_this) {
        return function(s, i) {
          curr_teams[i] = {
            team: s,
            tarx: 50 + (0.5 + curr_col) * (width_2 / num_cols),
            tary: 70 + (0.5 + curr_row) * (height_2 / num_rows)
          };
          curr_col++;
          if (curr_col >= num_cols) {
            curr_col = 0;
            return curr_row++;
          }
        };
      })(this));
      this.circles.each((function(_this) {
        return function(c) {
          return curr_teams.forEach(function(s) {
            if (s.team === c.team) {
              c.tarx = s.tarx;
              return c.tary = s.tary;
            }
          });
        };
      })(this));
      return this.update();
    };

    BubbleChart.prototype.split_by_position = function() {
      var curr_col, curr_positions, curr_row, height_2, num_cols, num_rows, width_2;
      curr_positions = [];
      this.circles.each((function(_this) {
        return function(c) {
          if (curr_positions.indexOf(c.position) < 0) {
            return curr_positions.push(c.position);
          }
        };
      })(this));
      num_rows = Math.round(Math.sqrt(curr_positions.length)) + 1;
      num_cols = curr_positions.length / (num_rows - 1);
      curr_row = 0;
      curr_col = 0;
      width_2 = this.width - 200;
      height_2 = this.height - 130;
      curr_positions.forEach((function(_this) {
        return function(s, i) {
          curr_positions[i] = {
            position: s,
            tarx: 50 + (0.5 + curr_col) * (width_2 / num_cols),
            tary: 70 + (0.5 + curr_row) * (height_2 / num_rows)
          };
          curr_col++;
          if (curr_col >= num_cols) {
            curr_col = 0;
            return curr_row++;
          }
        };
      })(this));
      this.circles.each((function(_this) {
        return function(c) {
          return curr_positions.forEach(function(s) {
            if (s.position === c.position) {
              c.tarx = s.tarx;
              return c.tary = s.tary;
            }
          });
        };
      })(this));
      return this.update();
    };

    BubbleChart.prototype.update = function() {
      var that;
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("stroke-width", 3).attr("id", function(d) {
        return "bubble_" + d.id;
      }).attr("class", function(d) {
        return d.team.toLowerCase().replace(/\s/g, '_');
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
      this.circles.exit().remove();
      this.force.on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_target(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      return this.force.start();
    };

    BubbleChart.prototype.move_towards_target = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (d.tarx - d.x) * 0.7 * alpha;
          return d.y = d.y + (d.tary - d.y) * 0.7 * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      content = "<div class='tooltip-name'>" + data.name + "</div>";
      content += "" + data.team + "<br/>";
      content += "" + data.school + "<br/>";
      content += "" + data.position;
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      return chart = new BubbleChart(csv);
    };
    return d3.csv("data/players.csv", render_vis);
  });

}).call(this);
