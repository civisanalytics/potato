// Generated by CoffeeScript 1.7.1
(function() {
  var root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Potato = (function() {
    function Potato(data, params) {
      if (params == null) {
        params = {
          split: true,
          color: true,
          size: true,
          order: true,
          "class": null
        };
      }
      this.update_position = __bind(this.update_position, this);
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.move_towards_target = __bind(this.move_towards_target, this);
      this.adjust_label_pos = __bind(this.adjust_label_pos, this);
      this.update = __bind(this.update, this);
      this.order_by = __bind(this.order_by, this);
      this.order_buttons = __bind(this.order_buttons, this);
      this.size_by = __bind(this.size_by, this);
      this.size_buttons = __bind(this.size_buttons, this);
      this.color_by = __bind(this.color_by, this);
      this.color_buttons = __bind(this.color_buttons, this);
      this.split_by = __bind(this.split_by, this);
      this.split_buttons = __bind(this.split_buttons, this);
      this.remove_node = __bind(this.remove_node, this);
      this.add_node = __bind(this.add_node, this);
      this.add_all = __bind(this.add_all, this);
      this.create_filters = __bind(this.create_filters, this);
      this.drag_select = __bind(this.drag_select, this);
      this.data = data;
      this.width = $(window).width();
      this.height = $(window).height() - 105;
      this.node_class = params["class"];
      $.each(this.data, (function(_this) {
        return function(i, d) {
          return d.node_id = i;
        };
      })(this));
      $("#vis").append("<div class='tooltip' id='node-tooltip'></div>").append("<div id='toolbar'><div id='modifiers'></div><div id='filter-select-buttons'></div></div>");
      $("#node-tooltip").hide();
      this.vis = d3.select("#vis").append("svg").attr("viewBox", "0 0 " + this.width + " " + this.height).attr("id", "vis-svg");
      this.force = d3.layout.force().gravity(-0.01).charge(function(d) {
        return -Math.pow(d.radius, 2.0) * 1.5;
      }).size([this.width, this.height]);
      this.drag_select();
      this.nodes = this.force.nodes();
      this.labels = [];
      this.create_filters();
      if (params.split) {
        this.split_buttons();
      }
      if (params.color) {
        this.color_buttons();
      }
      if (params.size) {
        this.size_buttons();
      }
      if (params.order) {
        this.order_buttons();
      }
      this.add_all();
    }

    Potato.prototype.drag_select = function() {
      console.log(this.vis);
      return this.vis.on("mousedown", function() {
        var p;
        p = d3.mouse(this);
        return d3.select(this).append("rect").attr({
          rx: 6,
          ry: 6,
          "class": "select-box",
          x: p[0],
          y: p[1],
          width: 0,
          height: 0
        });
      }).on("mousemove", function() {
        var d, move, p, s;
        s = d3.select(this).select("rect.select-box");
        if (!s.empty()) {
          p = d3.mouse(this);
          d = {
            x: parseInt(s.attr("x"), 10),
            y: parseInt(s.attr("y"), 10),
            width: parseInt(s.attr("width"), 10),
            height: parseInt(s.attr("height"), 10)
          };
          move = {
            x: p[0] - d.x,
            y: p[1] - d.y
          };
          if (move.x < 1 || (move.x * 2 < d.width)) {
            d.x = p[0];
            d.width -= move.x;
          } else {
            d.width = move.x;
          }
          if (move.y < 1 || (move.y * 2 < d.height)) {
            d.y = p[1];
            d.height -= move.y;
          } else {
            d.height = move.y;
          }
          return s.attr(d);
        }
      }).on("mouseup", (function(_this) {
        return function() {
          var s, sx, sx2, sy, sy2;
          s = _this.vis.select("rect.select-box");
          sx = parseInt(s.attr('x'), 10);
          sx2 = sx + parseInt(s.attr('width'), 10);
          sy = parseInt(s.attr('y'), 10);
          sy2 = sy + parseInt(s.attr('height'), 10);
          _this.circles.each(function(c) {
            if (c.x > sx && c.x < sx2 && c.y > sy && c.y < sy2) {
              return _this.remove_node(c.id);
            }
          });
          return s.remove();
        };
      })(this));
    };

    Potato.prototype.create_filters = function() {
      var filter_button, sorted_filters;
      sorted_filters = {};
      this.filter_names = [];
      $.each(this.data[0], (function(_this) {
        return function(d) {
          if (d !== 'node_id') {
            _this.filter_names.push({
              value: d
            });
            return sorted_filters[d] = [];
          }
        };
      })(this));
      this.data.forEach((function(_this) {
        return function(d) {
          return $.each(d, function(k, v) {
            var filter_exists;
            if (k !== 'node_id') {
              filter_exists = $.grep(sorted_filters[k], function(e) {
                return e.filter === k && e.value === v;
              });
              if (filter_exists.length === 0) {
                return sorted_filters[k].push({
                  filter: k,
                  value: v
                });
              }
            }
          });
        };
      })(this));
      this.categorical_filters = [];
      this.numeric_filters = [];
      $.each(sorted_filters, (function(_this) {
        return function(f, v) {
          if (isNaN(v[0].value)) {
            if (v.length !== _this.data.length && v.length < 500) {
              return _this.categorical_filters.push({
                value: f
              });
            }
          } else {
            return _this.numeric_filters.push({
              value: f
            });
          }
        };
      })(this));
      $.each(this.categorical_filters, (function(_this) {
        return function(k, v) {
          return sorted_filters[v.value].sort(function(a, b) {
            if (a.value === b.value) {
              return 0;
            } else {
              return (a.value > b.value) || -1;
            }
          });
        };
      })(this));
      filter_button = $("<button class='active filter-button filter-0'>Reset Nodes</button>");
      filter_button.on("click", (function(_this) {
        return function(e) {
          return _this.add_all();
        };
      })(this));
      return $("#filter-select-buttons").append(filter_button);
    };

    Potato.prototype.add_all = function() {
      var color_id, size_id, split_id;
      if (this.nodes.length !== this.data.length) {
        this.data.forEach((function(_this) {
          return function(d) {
            if ($.grep(_this.nodes, function(e) {
              return e.id === d.node_id;
            }).length === 0) {
              return _this.add_node(d);
            }
          };
        })(this));
      }
      this.update();
      split_id = $(".split-option.active").attr('id');
      if (split_id !== void 0) {
        this.split_by(split_id.substr(split_id.indexOf("-") + 1));
      }
      color_id = $(".color-option.active").attr('id');
      if (color_id !== void 0) {
        this.color_by(color_id.substr(color_id.indexOf("-") + 1));
      }
      size_id = $(".size-option.active").attr('id');
      if (size_id !== void 0) {
        return this.size_by(size_id.substr(size_id.indexOf("-") + 1));
      }
    };

    Potato.prototype.add_node = function(d) {
      var curr_class, curr_r, node, vals;
      vals = {};
      $.each(this.filter_names, (function(_this) {
        return function(k, f) {
          return vals[f.value] = d[f.value];
        };
      })(this));
      curr_class = '';
      curr_r = 5;
      if (this.node_class != null) {
        curr_class = d[this.node_class];
      }
      node = {
        id: d.node_id,
        radius: curr_r,
        values: vals,
        color: "#777",
        "class": curr_class,
        x: Math.random() * 900,
        y: Math.random() * 800,
        tarx: this.width / 2.0,
        tary: this.height / 2.0
      };
      return this.nodes.push(node);
    };

    Potato.prototype.remove_node = function(id) {
      var len;
      len = this.nodes.length;
      while (len--) {
        if (this.nodes[len]['id'] === id) {
          this.nodes.splice(len, 1);
          break;
        }
      }
      return this.update();
    };

    Potato.prototype.split_buttons = function() {
      $("#modifiers").append("<div id='split-wrapper' class='modifier-wrapper'><button id='split-button' class='modifier-button'>Split By<span class='button-arrow'>&#x25BC;</span><span id='split-hint' class='modifier-hint'></span></button><div id='split-menu' class='modifier-menu'></div></div>");
      $("#split-button").hover(function() {
        return $("#split-menu").slideDown(100);
      });
      $("#split-wrapper").mouseleave(function() {
        return $("#split-menu").slideUp(100);
      });
      return d3.select("#split-menu").selectAll('div').data(this.categorical_filters).enter().append("div").text(function(d) {
        return d.value;
      }).attr("class", 'modifier-option split-option').attr("id", function(d) {
        return 'split-' + d.value;
      }).on("click", (function(_this) {
        return function(d) {
          return _this.split_by(d.value);
        };
      })(this));
    };

    Potato.prototype.split_by = function(split) {
      var curr_col, curr_row, curr_vals, height_2, num_cols, num_rows, width_2;
      if (this.circles === void 0 || this.circles.length === 0) {
        return;
      }
      $("#split-hint").html("<br>" + split);
      $(".split-option").removeClass('active');
      $("#split-" + split).addClass('active');
      while (this.labels.length > 0) {
        this.labels.pop();
      }
      curr_vals = [];
      this.circles.each((function(_this) {
        return function(c) {
          if (curr_vals.indexOf(c['values'][split]) < 0) {
            return curr_vals.push(c['values'][split]);
          }
        };
      })(this));
      num_rows = Math.round(Math.sqrt(curr_vals.length)) + 1;
      num_cols = curr_vals.length / (num_rows - 1);
      curr_row = 0;
      curr_col = 0;
      width_2 = this.width * 0.75;
      height_2 = this.height * 0.8;
      curr_vals.sort();
      curr_vals.forEach((function(_this) {
        return function(s, i) {
          var label;
          curr_vals[i] = {
            split: s,
            tarx: (_this.width * 0.08) + (0.5 + curr_col) * (width_2 / num_cols),
            tary: (_this.height * 0.15) + (0.5 + curr_row) * (height_2 / num_rows)
          };
          label = {
            val: s,
            split: split,
            x: curr_vals[i].tarx,
            y: curr_vals[i].tary,
            tarx: curr_vals[i].tarx,
            tary: curr_vals[i].tary
          };
          _this.labels.push(label);
          curr_col++;
          if (curr_col >= num_cols) {
            curr_col = 0;
            return curr_row++;
          }
        };
      })(this));
      this.circles.each((function(_this) {
        return function(c) {
          return curr_vals.forEach(function(s) {
            if (s.split === c['values'][split]) {
              c.tarx = s.tarx;
              return c.tary = s.tary;
            }
          });
        };
      })(this));
      return this.update();
    };

    Potato.prototype.color_buttons = function() {
      $("#vis").append("<div id='color-legend'></div>");
      $("#modifiers").append("<div id='color-wrapper' class='modifier-wrapper'><button id='color-button' class='modifier-button'>Color By<span class='button-arrow'>&#x25BC;</span><span id='color-hint' class='modifier-hint'></span></button><div id='color-menu' class='modifier-menu'></div></div>");
      $("#color-button").hover(function() {
        return $("#color-menu").slideDown(100);
      });
      $("#color-wrapper").mouseleave(function() {
        return $("#color-menu").slideUp(100);
      });
      return d3.select("#color-menu").selectAll('div').data(this.categorical_filters).enter().append("div").text(function(d) {
        return d.value;
      }).attr("class", 'modifier-option color-option').attr("id", function(d) {
        return 'color-' + d.value;
      }).on("click", (function(_this) {
        return function(d) {
          return _this.color_by(d.value);
        };
      })(this));
    };

    Potato.prototype.color_by = function(split) {
      var colors, curr_vals, g, l_size, legend, num_colors;
      if (this.circles === void 0 || this.circles.length === 0) {
        return;
      }
      $("#color-hint").html("<br>" + split);
      $(".color-option").removeClass('active');
      $("#color-" + split).addClass('active');
      curr_vals = [];
      this.circles.each((function(_this) {
        return function(c) {
          if (curr_vals.indexOf(c['values'][split]) < 0) {
            return curr_vals.push(c['values'][split]);
          }
        };
      })(this));
      num_colors = curr_vals.length;
      colors = d3.scale.ordinal().domain(curr_vals).range(['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5', '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5']);
      d3.select("#color-legend").selectAll("*").remove();
      l_size = 30;
      legend = d3.select("#color-legend").append("svg").attr("width", 150).attr("height", colors.domain().length * l_size).style("padding", "20px 0 0 20px");
      g = legend.selectAll("g").data(colors.domain()).enter().append("g");
      g.append("rect").attr("y", function(d, i) {
        return i * l_size;
      }).attr("rx", l_size * 0.5).attr("ry", l_size * 0.5).attr("width", l_size * 0.5).attr("height", l_size * 0.5).style("fill", (function(_this) {
        return function(d) {
          return colors(d);
        };
      })(this));
      g.append("text").attr("x", 20).attr("y", function(d, i) {
        return i * l_size + 12;
      }).text(function(d) {
        return d;
      });
      this.circles.each((function(_this) {
        return function(c) {
          return curr_vals.forEach(function(s) {
            if (s === c['values'][split]) {
              return c.color = String(colors(s));
            }
          });
        };
      })(this));
      return this.circles.attr("fill", function(d) {
        return d.color;
      });
    };

    Potato.prototype.size_buttons = function() {
      $("#modifiers").append("<div id='size-wrapper' class='modifier-wrapper'><button id='size-button' class='modifier-button'>Size By<span class='button-arrow'>&#x25BC;</span><span id='size-hint' class='modifier-hint'></span></button><div id='size-menu' class='modifier-menu'></div></div>");
      $("#size-button").hover(function() {
        return $("#size-menu").slideDown(100);
      });
      $("#size-wrapper").mouseleave(function() {
        return $("#size-menu").slideUp(100);
      });
      return d3.select("#size-menu").selectAll('div').data(this.numeric_filters).enter().append("div").text(function(d) {
        return d.value;
      }).attr("class", 'modifier-option size-option').attr("id", function(d) {
        return 'size-' + d.value;
      }).on("click", (function(_this) {
        return function(d) {
          return _this.size_by(d.value);
        };
      })(this));
    };

    Potato.prototype.size_by = function(split) {
      var curr_max, curr_vals, non_zero_min, sizes;
      if (this.circles === void 0 || this.circles.length === 0) {
        return;
      }
      $("#size-hint").html("<br>" + split);
      $(".size-option").removeClass('active');
      $("#size-" + split).addClass('active');
      curr_vals = [];
      this.circles.each((function(_this) {
        return function(c) {
          return curr_vals.push(parseFloat(c['values'][split]));
        };
      })(this));
      curr_max = d3.max(curr_vals, function(d) {
        return d;
      });
      non_zero_min = curr_max;
      $.each(curr_vals, (function(_this) {
        return function(k, c) {
          if (c > 0 && c < non_zero_min) {
            return non_zero_min = c;
          }
        };
      })(this));
      sizes = d3.scale.sqrt().domain([non_zero_min, curr_max]).range([2, 20]).clamp(true);
      this.circles.each((function(_this) {
        return function(c) {
          var s_val;
          s_val = c['values'][split];
          if (!isNaN(s_val) && s_val !== "") {
            return c.radius = sizes(parseFloat(s_val));
          } else {
            return c.radius = 0;
          }
        };
      })(this));
      return this.update();
    };

    Potato.prototype.order_buttons = function() {
      $("#modifiers").append("<div id='order-wrapper' class='modifier-wrapper'><button id='order-button' class='modifier-button'>Order By<span class='button-arrow'>&#x25BC;</span><span id='order-hint' class='modifier-hint'></span></button><div id='order-menu' class='modifier-menu'></div></div>");
      $("#order-button").hover(function() {
        return $("#order-menu").slideDown(100);
      });
      $("#order-wrapper").mouseleave(function() {
        return $("#order-menu").slideUp(100);
      });
      return d3.select("#order-menu").selectAll('div').data(this.numeric_filters).enter().append("div").text(function(d) {
        return d.value;
      }).attr("class", 'modifier-option order-option').attr("id", function(d) {
        return 'order-' + d.value;
      }).on("click", (function(_this) {
        return function(d) {
          return _this.order_by(d.value);
        };
      })(this));
    };

    Potato.prototype.order_by = function(split) {
      var curr_max, curr_vals, non_zero_min, orders;
      if (this.circles === void 0 || this.circles.length === 0) {
        return;
      }
      $("#order-hint").html("<br>" + split);
      $(".order-option").removeClass('active');
      $("#order-" + split).addClass('active');
      curr_vals = [];
      this.circles.each((function(_this) {
        return function(c) {
          return curr_vals.push(parseFloat(c['values'][split]));
        };
      })(this));
      curr_max = d3.max(curr_vals, function(d) {
        return d;
      });
      non_zero_min = curr_max;
      $.each(curr_vals, (function(_this) {
        return function(k, c) {
          if (c > 0 && c < non_zero_min) {
            return non_zero_min = c;
          }
        };
      })(this));
      orders = d3.scale.sqrt().domain([non_zero_min, curr_max]).range([100, this.width - 100]).clamp(true);
      this.circles.each((function(_this) {
        return function(c) {
          var s_val;
          s_val = c['values'][split];
          if (!isNaN(s_val) && s_val !== "") {
            return c.tarx = orders(parseFloat(s_val));
          } else {
            return c.tarx = -100;
          }
        };
      })(this));
      return this.update();
    };

    Potato.prototype.update = function() {
      var that;
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("stroke-width", 2).attr("id", function(d) {
        return "bubble_" + d.id;
      }).attr("fill", function(d) {
        return d.color;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      }).on("click", (function(_this) {
        return function(d) {
          return _this.remove_node(d.id);
        };
      })(this)).attr("class", function(d) {
        if (d["class"].length > 0) {
          return d["class"].toLowerCase().replace(/\s/g, '_').replace('.', '');
        } else {
          return '';
        }
      });
      this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
      this.circles.exit().remove();
      this.vis.selectAll(".split-labels").remove();
      this.text = this.vis.selectAll(".split-labels").data(this.labels);
      this.text.enter().append("text").attr("x", function(d) {
        return d.x;
      }).attr("y", function(d) {
        return d.y;
      }).attr("class", 'split-labels').text(function(d) {
        return d.val;
      });
      this.text.exit().remove();
      this.force.on("tick", (function(_this) {
        return function(e) {
          _this.circles.each(_this.move_towards_target(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
          _this.text.each(_this.adjust_label_pos());
          return _this.text.each(_this.move_towards_target(e.alpha)).attr("x", function(d) {
            return d.x;
          }).attr("y", function(d) {
            return d.y;
          });
        };
      })(this));
      return this.force.start();
    };

    Potato.prototype.adjust_label_pos = function() {
      return (function(_this) {
        return function(d) {
          var max_x, min_x, min_y;
          min_y = 10000;
          min_x = 10000;
          max_x = 0;
          _this.circles.each(function(c) {
            if (d.val === c['values'][d.split]) {
              if ((c.y - c.radius) < min_y) {
                min_y = c.y - c.radius;
              }
              if ((c.x - c.radius) < min_x) {
                min_x = c.x - c.radius;
              }
              if ((c.x + c.radius) > max_x) {
                return max_x = c.x + c.radius;
              }
            }
          });
          d.tary = min_y - 10;
          return d.tarx = (max_x - min_x) / 2.0 + min_x;
        };
      })(this);
    };

    Potato.prototype.move_towards_target = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (d.tarx - d.x) * 0.7 * alpha;
          return d.y = d.y + (d.tary - d.y) * 0.7 * alpha;
        };
      })(this);
    };

    Potato.prototype.show_details = function(data, i, element) {
      var content;
      content = "";
      $.each(data.values, function(k, v) {
        return content += "" + v + "<br/>";
      });
      $("#node-tooltip").html(content);
      this.update_position(d3.event);
      return $("#node-tooltip").show();
    };

    Potato.prototype.hide_details = function(data, i, element) {
      return $("#node-tooltip").hide();
    };

    Potato.prototype.update_position = function(e) {
      var tth, ttleft, tttop, ttw, xOffset, yOffset;
      xOffset = 20;
      yOffset = 10;
      ttw = $("#node-tooltip").width();
      tth = $("#node-tooltip").height();
      ttleft = (e.pageX + xOffset * 2 + ttw) > $(window).width() ? e.pageX - ttw - xOffset * 2 : e.pageX + xOffset;
      tttop = (e.pageY + yOffset * 2 + tth) > $(window).height() ? e.pageY - tth - yOffset * 2 : e.pageY + yOffset;
      return $("#node-tooltip").css('top', tttop + 'px').css('left', ttleft + 'px');
    };

    return Potato;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

}).call(this);
